import sys
import json
from collections import defaultdict


FILE_INFO = """/*
 * This file was generated by `tools/codegen/gen_block.py`.
 */
"""


BLOCK_H_HEAD = """
#ifndef MC_LIB_BLOCK_H
#define MC_LIB_BLOCK_H
"""


BLOCK_H_TAIL = """
#endif // MC_LIB_BLOCK_H
"""


BLOCK_H_INCLUDE = """
#include <GL/glew.h>
"""


BLOCK_TYPE_ENUM_HEAD = """
enum class BlockType: GLuint {
"""


BLOCK_TYPE_ENUM_TAIL = """};
"""


BLOCK_PROPERTY_ENUM_HEAD = """
enum class BlockProperty: GLuint {
"""


BLOCK_PROPERTY_ENUM_TAIL = """};
"""


BLOCK_PROPERTY_QUERY = """
template <BlockProperty> bool hasProperty(const BlockType type);
"""


BLOCK_SOURCE_HEAD = """
#include "block.h"
"""


def gen_block_property_query_cases(block_type, value):
    assert value in ["true", "false"], "value must be 'true' or 'false'"
    return f"  case BlockType::{block_type}: return {value};\n"


def gen_block_property_query(property_name, cases):
    return f"""
template <>
bool hasProperty<BlockProperty::{property_name}>(const BlockType blockType) {{
  switch (blockType) {{
{cases}  }}
}}
    """


def read_json(json_file):
    try:
        with open(json_file, "r") as file:
            data = json.load(file)
            return data
    except FileNotFoundError:
        print("The file was not found.")
    except json.JSONDecodeError:
        print("Error decoding JSON")
    except Exception as e:
        print(f"An error occurred: {e}")


def main(block_type_file, block_property_file, block_header_file, block_source_file):
    block_type_enum_body = ""
    block_property_enum_body = ""

    all_properties = []
    all_types = []

    config_data = read_json(block_property_file).items()
    for property_name, index in config_data:
        all_properties.append(property_name)
        block_property_enum_body += f"  {property_name} = {index}, \n"

    properties_map = defaultdict(list)
    config_data = read_json(block_type_file).items()
    for type_name, attrs in config_data:
        index = attrs["index"]
        block_type_enum_body += f"  {type_name} = {index}, \n"
        all_types.append(type_name)
        for p in all_properties:
            if p in attrs["properties"]:
                properties_map[p].append(type_name)

    cases = {p: {t: False for t in all_types} for p in all_properties}

    for p in properties_map:
        for t in properties_map[p]:
            cases[p][t] = True

    block_property_query = ""
    for p in cases:
        block_property_query_cases = ""
        for t in cases[p]:
            block_property_query_cases += \
                gen_block_property_query_cases(t, "true" if cases[p][t] else "false")
        
        # print(block_property_query_cases)
        block_property_query += \
            gen_block_property_query(p, block_property_query_cases)

    # print(block_property_query)

    # Gen `block.h`.
    with open(block_header_file, "w") as f:
        f.write(FILE_INFO)
        f.write(BLOCK_H_HEAD)
        f.write(BLOCK_H_INCLUDE)
        # block type enum
        f.write(BLOCK_TYPE_ENUM_HEAD)
        f.write(block_type_enum_body)
        f.write(BLOCK_TYPE_ENUM_TAIL)
        # block property enum
        f.write(BLOCK_PROPERTY_ENUM_HEAD)
        f.write(block_property_enum_body)
        f.write(BLOCK_PROPERTY_ENUM_TAIL)
        # block property query
        f.write(BLOCK_PROPERTY_QUERY)
        f.write(BLOCK_H_TAIL)

    # Gen `block.cpp`.
    with open(block_source_file, "w") as f:
        f.write(FILE_INFO)
        f.write(BLOCK_SOURCE_HEAD)
        f.write(block_property_query)


"""
python3 ./tools/codegen/gen_block.py \
  ./config/block_type.json \
  ./config/block_property.json \
  ./lib/block.h \
  ./lib/block.cpp
"""
if __name__ == "__main__":
    block_type_file = sys.argv[1]
    block_property_file = sys.argv[2]
    block_header_file = sys.argv[3]
    block_source_file =  sys.argv[4]
    main(block_type_file, block_property_file, block_header_file, block_source_file)
